from fastapi import APIRouter, HTTPException
from fastapi.responses import FileResponse
from pydantic import BaseModel
import os
from app.services.local_tts import tts_save_file
from app.services.azure_tts import azure_tts_generate
from app.config import ONLINE_MODE

router = APIRouter()

class TTSRequest(BaseModel):
    text: str
    voice: str = "default"
    format: str = "wav"

@router.post("/audio/generate")
def generate_audio(req: TTSRequest):
    if ONLINE_MODE:
        # Try Azure first if configured
        try:
            path = azure_tts_generate(req.text, voice=req.voice, fmt=req.format)
            return {"source": "azure", "file": path}
        except Exception as e:
            # fallback to local
            pass
    # local TTS
    path = tts_save_file(req.text, voice=req.voice, filename=None)
    return {"source": "local", "file": path}

@router.get("/audio/file/{filename}")
def get_audio_file(filename: str):
    """Serve audio files generated by TTS"""
    from app.config import DATA_DIR
    TTS_DIR = os.path.join(DATA_DIR, "tts")
    file_path = os.path.join(TTS_DIR, filename)
    
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="Audio file not found")
    
    return FileResponse(
        file_path, 
        media_type="audio/wav",
        filename=filename
    )
